/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input Order : Object
*	@input LastOrderTime : String
* 	@input FeedFileWriter : Object
* 	@input FeedCount : Number
*	@input Counter : Number
*   @output LastOrderTime : String
* 	@output MaxOrdersPerFile : Number
*
*/
var system = require('dw/system');
var ArrayList = require('dw/util/ArrayList');
var Collection = require('dw/util/Collection');
var Money = require('dw/value/Money'); 
var EnumValue = require('dw/value/EnumValue');
var Campaign = require('dw/campaign');
var ShippingMethod = require('dw/order/ShippingMethod');
var constants = require('./returnlyConstants');

const PAYMENT_INSTRUMENTS_FIELDS = [
	'UUID', 'paymentMethod', 
	'refundedAmount', 'giftCertificateCode', 
	'creationDate', 'lastModified'
];
const SHIPMENTS_FIELDS = [
	'ID', 'gift', 'default', 'trackingNumber'
];

const PRODUCT_LINE_ITEMS_FIELDS = [
	'basePrice', 'netPrice', 'adjustedNetPrice', 'tax',
	'adjustedTax', 'UUID', 'lineItemText',
	'bonusProductLineItem', 'bundledProductLineItem', 'optionProductLineItem',
	'gift'
];

const NOTES_FIELDS = ['createdBy', 'creationDate', 'subject', 'text']; 

function execute( args ){
	var o = args.Order,
		lastModifiedDate = new Date(o.lastModified),
		order = {
			"UUID": o.UUID,
			"creationDate": o.creationDate,
			"lastModified": o.lastModified,
			"orderNo": o.orderNo,
			"orderToken": o.orderToken,
			"originalOrderNo": o.originalOrderNo,
			"currentOrderNo": o.orderNo,
			"status": o.status.getDisplayValue(),
			"paymentStatus": o.paymentStatus.getDisplayValue(),
			"shippingStatus": o.shippingStatus.getDisplayValue(),
			"currency": o.getCurrencyCode(),
			"adjustedMerchandizeTotalNetPrice": toCent(o.getAdjustedMerchandizeTotalNetPrice()),
			"adjustedMerchandizeTotalTax": toCent(o.getAdjustedMerchandizeTotalTax()),
			"adjustedShippingTotalNetPrice": toCent(o.getAdjustedShippingTotalNetPrice()),
			"adjustedShippingTotalTax": toCent(o.getAdjustedShippingTotalTax()),
			"merchandizeTotalNetPrice": toCent(o.getMerchandizeTotalNetPrice()),
			"merchandizeTotalTax": toCent(o.getMerchandizeTotalTax()),
			"shippingTotalNetPrice": toCent(o.getShippingTotalNetPrice()),
			"shippingTotalTax": toCent(o.getShippingTotalTax()),
			"giftCertificateTotalNetPrice": toCent(o.getGiftCertificateTotalNetPrice()),
			"giftCertificateTotalTax": toCent(o.getGiftCertificateTotalTax()),
			"totalGrossPrice": toCent(o.getTotalGrossPrice()),
			"totalTax": toCent(o.getTotalTax()),
			"priceAdjustments": fillProductPriceAdjustment(o),
			"createdBy": o.getCreatedBy(),
			"customerLocaleID": o.getCustomerLocaleID(),
			"remoteHost": o.getRemoteHost(),
			"externalOrderNo": o.getExternalOrderNo(),
			"externalOrderStatus": o.getExternalOrderStatus(),
			"imported": o.isImported() ? true : false,
			"notes": getData(o, NOTES_FIELDS, 'getNotes'),
			"customer": {
				"email": o.customerEmail,
				"name": o.customerName,
				"number": o.customerNo,
				"ID": o.customer ? o.customer.ID : null,
				"billingAddress": fillBillingAddress(o),
				"groups": o.customer ? fillCustomerGroups(o) : null
			},
			"paymentInstruments": getData(o, PAYMENT_INSTRUMENTS_FIELDS, 'getPaymentInstruments'),
			"shipments": getData(o, SHIPMENTS_FIELDS, "getShipments"),
			"allProductLineItems": getData(o, PRODUCT_LINE_ITEMS_FIELDS, 'getAllProductLineItems')
		};

	delete_null_properties(order);

	if(args.Counter > 1) {
		args.FeedFileWriter.writeLine(',');
	}
	
	args.FeedFileWriter.writeLine(JSON.stringify(order));
	args.LastOrderTime = lastModifiedDate.toISOString();
	args.MaxOrdersPerFile = constants.ORDERS_PER_FILE;
	
	return PIPELET_NEXT;
}

/**
 * @description Construct data feed part
 * @example getData(order, ['companyName', 'countryCode'], 'billingAddress')
 * @param dataFeed {Object}
 * @param keys {Array}
 * @param method {String}
 * @param parentObj {Object}
 * @returns {Array}
 */

function getData(dataFeed, keys, method, parentObj) {
	var data = dataFeed ? dataFeed[method]() : new ArrayList(),
		obj = [];

	//data: ProductLineItem
	function constructObj(data) {
		var params = {};
		switch (method) {
			case "getAllProductLineItems":
				var parentItem = data.getParent();
				params['product'] = fillProduct(data);
				params['priceAdjustments'] = fillProductPriceAdjustment(data);
				params['quantity'] = data.quantityValue;
				params['parentUUID'] = parentItem ? parentItem.getUUID() : null;
				break;
			case "getShipments":
				params['shippingAddress'] = fillShipping(data);
				params['priceAdjustments'] = fillProductPriceAdjustment(data, "getShippingPriceAdjustments");
				params['shippingMethod'] = data.shippingMethod && data.shippingMethod.displayName;
				params['status'] = data.shippingStatus.getDisplayValue();
				break;
			case "getPaymentInstruments":
				params['paymentTransaction'] = fillPaymentTransaction(data);
				break;
		}
		
		for (var currentKey = 0; currentKey < keys.length; currentKey++) {
			var key = keys[currentKey], value;
			try { 
				value = data[key];
			} catch (e) {
				// maybe value is a function
				if(key && key.substring(0,3) === 'get') {
					value = data[key]();
				}
			} finally {
				if(value != null) {
					switch (value.constructor) {
						case Money:
							params[key] = value ? toCent(value) : 0;
							break; 
						case EnumValue:
							keys[currentKey] === 'countryCode'
								? params[key] = value.value.toUpperCase()
								: params[key] = value.getDisplayValue().toUpperCase();
							break;
						default:
							params[key] = value;

					}
				}
			}
		}
		return params;
	}

	if(!(data instanceof Collection) && !(data instanceof ArrayList)) {
		obj.push(constructObj(data));
	} else {
		for (var currentDataStep = 0; currentDataStep < data.size(); currentDataStep++) {
			var result = constructObj(data[currentDataStep]);
			if(parentObj) {
				result[parentObj.name] = getData(dataFeed, parentObj.fields, parentObj.method);
			}
			obj.push(result);
		}
	}
	
	if(obj.length) { return obj }
}

/**
 * @description Get All customer groups
 * @param order
 * @returns {Array}
 */
function fillCustomerGroups(order) {
	var groups = order.customer.customerGroups,
		groupsArr = [];
	
	for(var i in groups) {
		groupsArr.push(groups[i].ID);
	}

	return groupsArr;
}

/**
 * @description Construct custom object from PaymentTransaction class
 * @param data
 * @returns {{UUID: String, amount: Number, transactionID: String}}
 */
function fillPaymentTransaction(data) {
	var transaction = data.getPaymentTransaction();

	return {
		'UUID': transaction.UUID,
		'amount': toCent(transaction.amount),
		'transactionID': transaction.transactionID
	}
}


/**
 * @description Construct custom object from BillingAddress class
 * @param order
 * @returns {{address1: *, address2: *, city: *, companyName: *, countryCode: *, fullName: *, postalCode: *, stateCode: *}}
 */
function fillBillingAddress(order) {
	var bA = order.getBillingAddress();

	return {
		'address1': bA.address1,
		'address2': bA.address2,
		'city': bA.city,
		'phone': bA.phone,
		'companyName': bA.companyName,
		'countryCode': bA.countryCode.value.toUpperCase(),
		'fullName': bA.fullName,
		'postalCode': bA.postalCode,
		'stateCode':  bA.stateCode
	}
}

/**
 * @description Returns product data object
 * @param data
 * @returns {{ID: String, UUID: String, bundle: Boolean, master: Boolean, productSet: Boolean, productSetProduct: *, variant: *, lastModified: (*|lastModified|{}), creationDate: *, masterID: *, name: *, variationAttributes: Array, classificationCategory: null, imageURL: null}}
 */
function fillProduct(data) {
	var p = data.getProduct();

	if(p && !data.optionProductLineItem) {
		var options = p.variationModel ? p.variationModel.productVariationAttributes : new ArrayList(),
			variations = [],
			categories = p.getCategories(),
			categoriesIDs = [],
			masterID = null;

		if(p.variationModel && p.variationModel.master) {
			masterID = p.variationModel.master.ID;
		}
		
		for(var i = 0; i < options.size(); i++) {
			var variantValue = p.variationModel.getSelectedValue(options[i]);
			
			variations.push({
				"attributeID": 	options[i].attributeID,
				"displayName":	options[i].displayName,
				"customValue":	variantValue.displayValue
			});
		}
		
		for(var i in categories) {
			categoriesIDs.push(categories[i].ID)
		}
		
		return {
			'ID': p.ID,
			'UUID': p.UUID, 
			'bundle': p.bundle,
			'master': p.master,
			'productSet': p.productSet,
			'productSetProduct': p.productSetProduct,
			'variant': p.variant,
			'lastModified': p.lastModified,
			'creationDate': p.creationDate,
			'masterID': masterID,
			'name': p.name,
			'variationAttributes': variations,
			'classificationCategory': p.classificationCategory ? p.classificationCategory.ID : null,
			'categoryIDs': categoriesIDs,
			'imageURL': p.getImage('medium') ? p.getImage('medium').httpsURL.toString() : null,
			//'weight':p.weight,
			'UPC':p.UPC
		}	
	}
}

/**
 * @description Return Shipping data object
 * @param data
 * @returns {{
 * 		address1: String,
 * 		address2: String,
 * 		city: String,
 * 		companyName: String,
 * 		countryCode: String,
 * 		fullName: String,
 * 		phone: String,
 * 		postalCode: String,
 * 		stateCode: String
 * 	}}
 */
function fillShipping(data) {
	var a = data.shippingAddress;

	return {
		"address1": a.address1,
		"address2": a.address2,
		"city": a.city,
		"companyName": a.companyName,
		"countryCode": a.countryCode.getDisplayValue().toUpperCase(),
		"fullName": a.fullName,
		"phone": a.phone,
		"postalCode": a.postalCode,
		"stateCode": a.stateCode
	}
}

/**
 * @description Create price adjustment object
 * @param data
 * @param method
 * @returns {Array}
 */
function fillProductPriceAdjustment(data, method) {
	var priceAdjustments = method ? data[method]() : data.priceAdjustments,
		adjustments = new Array();

	for(var i = 0; i < priceAdjustments.size(); i++) {
		var adjustment = priceAdjustments[i];
		var promotion = adjustment.getPromotion();
		var appliedDiscount = adjustment.appliedDiscount;

    if (empty(appliedDiscount)) { continue; }

		var discount = {};

		switch(appliedDiscount.constructor) {
			case Campaign.AmountDiscount:
				discount.value = toInt(appliedDiscount.amount);
				break;
			case Campaign.PercentageDiscount || Campaign.PercentageOptionDiscount:
				discount.value = appliedDiscount.percentage;
				break;
			case Campaign.FixedPriceDiscount || Campaign.FixedPriceShippingDiscount:
				discount.value = toInt(appliedDiscount.fixedPrice);
				break;
			case Campaign.TotalFixedPriceDiscount:
				discount.value = toInt(appliedDiscount.totalFixedPrice);
				break;
		}

		if(discount.value != "undefined") {
			discount.quantity = appliedDiscount.quantity;
			discount.type = appliedDiscount.getType();
		}

		adjustments.push({
			"UUID": adjustment.getUUID(),
	        "createdBy": adjustment.createdBy,
	        "price": Math.round(adjustment.price.decimalValue * 100),
	        "manual": adjustment.isManual(),
			"promotion": {
				"UUID": promotion.getUUID(),
				"ID": promotion.ID,
				"enabled": promotion.isEnabled(),
				"active": promotion.active,
				"basedOnABTest": adjustment.basedOnABTest,
				"basedOnCoupons": promotion.basedOnCoupons,
				"creationDate": promotion.getCreationDate(),
				"lastModified": promotion.lastModified,
				"basedOnCustomerGroups": promotion.basedOnCustomerGroups,
				"basedOnSourceCodes": promotion.basedOnSourceCodes,
				"exclusivity": promotion.exclusivity,
				"promotionClass": promotion.promotionClass,
				"qualifierMatchMode": promotion.qualifierMatchMode ? promotion.qualifierMatchMode.toUpperCase() : null,
				"rank": promotion.rank,
				"startDate": promotion.startDate,
				"endDate": promotion.getEndDate() 
			},
			"appliedDiscount": discount
		});
	}
	 
	return adjustments;
}

/**
 * @description Delete all null (or undefined) properties from an object.
 * @param obj {Object}
 */
function delete_null_properties(obj) {
	for (var i in obj) {
		if (obj[i] === null) {
			delete obj[i];
		} else if (typeof obj[i] === 'object') {
			delete_null_properties(obj[i]);
		}
	}
}

/**
 * @description Convert float to cent
 * @example 0.99 => 99, 12.52 => 1252
 * @param number
 * @returns {Number}
 */

function toInt(number) {
	return parseInt(number.toString().replace('.', ''));
}

/**
 * @description Convert local formatted price string to cent number
 * @example toCent(<Money> USD 53.23) => 5323
 * @param money {Money}
 * @returns {number} 
 */

function toCent (money) {
	var amount = money.getValue();

	return Math.round(100 * parseFloat(typeof amount === 'string' ? amount.replace(/[$,]/g, '') : amount));
}
