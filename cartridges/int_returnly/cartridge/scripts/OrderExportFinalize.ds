/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*	@input LastOrderTime : String
*   @input FeedFileWriter : Object
*	@input FeedFile : Object
*
*/
var system = require('dw/system');
var SFTPClient = require('dw/net/SFTPClient');
var KeyRef = require('dw/crypto/KeyRef');
var File = require('dw/io/File');
var FileWriter = require('dw/io/FileWriter');
var FileReader = require('dw/io/FileReader');
var CustomObjMgr = require('dw/object/CustomObjectMgr');
var LOGGER = require('dw/system/Logger').getLogger('Returnly', 'info');
var constants = require('./returnlyConstants');

function execute( args ){
	var credentials = CustomObjMgr.getCustomObject('Returnly', 'ReturnlyConfiguration'),
		feedFileWriter = args.FeedFileWriter,
		feedFile = args.FeedFile;

	if(!credentials) { return PIPELET_ERROR }
	
	var client = new SFTPClient();
	var reference = new KeyRef('returnly');

	feedFileWriter.writeLine(']}');
	feedFileWriter.flush();
	feedFileWriter.close();

	try {
		client.setTimeout(5000);
		client.setIdentity(reference);

		writeOrderTrigger(args.LastOrderTime);

		var result = client.connect('sftp.returnly.com', 22, credentials.custom.SFTPUsername, '');

		if (!result){
			var error = client.errorMessage;
		} else {
			var gzipFile = new File(feedFile.getFullPath()+'.gz');

			feedFile.gzip(gzipFile);
			client.putBinary('outbox/' + gzipFile.name, gzipFile);
		}
	} catch (e) {
		LOGGER.info('Can\'t finish order export: {0}', e.toString());
	}

	return PIPELET_NEXT;
}

function writeOrderTrigger(time) {
	var orderTrigger = new File(constants.RETURNLY_IMPEX_PATH + File.SEPARATOR + system.Site.current.ID + constants.ORDER_TRIGGER_FILE),
		file = FileWriter(orderTrigger);

	file.writeLine(time);
	file.flush();
	file.close();
}