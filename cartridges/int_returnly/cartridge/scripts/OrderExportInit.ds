/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
*	@output LastOrderTime : String
*   @output OrdersIterator : Object
*	@output FeedCount : Number
*	@output Counter : Number
*
*/
var system = require('dw/system');
var File = require('dw/io/File');
var FileWriter = require('dw/io/FileWriter');
var FileReader = require('dw/io/FileReader');
var StringUtils = require('dw/util/StringUtils');
var Calendar = require('dw/util/Calendar');
var OrderMgr = require('dw/order/OrderMgr');
var Order = require('dw/order/Order');
var constants = require('./returnlyConstants');
var ArrayList = require('dw/util/ArrayList');

var LOGGER = dw.system.Logger.getLogger('Returnly', 'info');

function execute( args ){
	var creationDate = getLastExportedOrderTime();
	
	var iterator = OrderMgr.searchOrders(
		'status = {0} AND paymentStatus = {1} AND lastModified > {2}',
		'lastModified asc',
		Order.ORDER_STATUS_COMPLETED, Order.PAYMENT_STATUS_PAID, new Date(creationDate).toISOString()
	);

	LOGGER.info('Job "Order Feed" started at: {0}', new Date().getTime());
	LOGGER.info('Total orders: {0}', iterator.getCount());

	args.OrdersIterator = iterator;
	args.FeedCount = iterator.getCount();
	args.LastOrderTime = creationDate;
	args.Counter = 1;

	return PIPELET_NEXT;
}

/**
 * @description Read from trigger file the lastModified date of the last exported order. If file doesn't exist, creates one
 * @returns {String}
 */

function getLastExportedOrderTime() {
	var orderTrigger = new File(constants.RETURNLY_IMPEX_PATH + File.SEPARATOR + system.Site.current.ID + constants.ORDER_TRIGGER_FILE);
	
	if(!orderTrigger.file) {
		orderTrigger.createNewFile();
		return new Date(new Date().setFullYear(new Date().getFullYear() - 1)).toISOString();
	} else {
		return new FileReader(orderTrigger).readLine();
	}
}
