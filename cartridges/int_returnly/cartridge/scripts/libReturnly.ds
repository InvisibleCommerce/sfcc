'use strict';

var GCManager = require('./DWCertMgr'),
	Returnly = function(){},
	StringUtils = require('dw/util/StringUtils'),
	CustomObjMgr = require('dw/object/CustomObjectMgr');
	
var CONST = require('~/cartridge/scripts/returnlyConstants');

Returnly.prototype = {
	getCertificateByCode: function(code){
		return GCManager.getGiftCertificateByCode(code);
	},
	createGiftCertificate: function(giftCertDetails){
		return GCManager.createGiftCertificate(giftCertDetails);
	},
	disableGiftCertificateByCode: function(code){
		return GCManager.disableGiftCertificateByCode(code);
	},
	/**
	 * @description Provide authntication based on key parameter
	 * Base64-encoded string "username:token" is expected
	 * @return {Boolean}
	 */
	checkAuthentication: function(key){
		if (!key) {
			return false;
		}
		var credentials = StringUtils.decodeBase64(key).split(':', 2);
		var username = credentials[0], 
			token = credentials[1],
			config = this.getConfig();
		
		if (config && username == config.custom.SFTPUsername && token == config.custom.APIToken){
			return true;
		} else {
			return false;
		}
	},
	/**
	 * @description Find CustomObject by "instanceType" key, or return null
	 * @returns {null|Object}
	 */
	getConfig: function() {
	    return CustomObjMgr.getCustomObject(CONST.MODULE_NAME, CONST.CONFIGURATION_NAME);
	},
	/**
	 * Creates new CustomObject with "instanceType" key, which defined in the
	 * SYSTEM_INSTANCE_TYPES constant
	 * @returns {Object}
	 */
	createConfig: function() {
	    return CustomObjMgr.createCustomObject(CONST.MODULE_NAME, CONST.CONFIGURATION_NAME);
	},

  upgradeConfig: function() {
    var config = this.getConfig();
    CustomObjMgr.remove(config);
    var newConfig = this.createConfig();
    return newConfig;
  }
};

module.exports = new Returnly();
