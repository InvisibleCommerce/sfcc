<isif condition="${dw.system.Site.current.preferences.custom.shippedGlobalSwitch}">
  <script>
    shippedConfig = {
      publicKey: "${dw.system.Site.current.preferences.custom.shippedPublishableToken}",
      widgetSelector: '.shipped-widget',
      isShield: ${dw.system.Site.current.preferences.custom.shippedShield},
      isGreen: ${dw.system.Site.current.preferences.custom.shippedGreen},
      isOffByDefault: ${dw.system.Site.current.preferences.custom.shippedIsOffByDefault},
      isInformational: ${dw.system.Site.current.preferences.custom.shippedIsInformational},
      isMandatory: ${dw.system.Site.current.preferences.custom.shippedIsMandatory},
      appearance: '${dw.system.Site.current.preferences.custom.shippedAppearance.value}',
    }
  </script>

  <isif condition="${dw.system.Site.current.preferences.custom.shippedEnvironment.value == 'production'}">
    <script src="https://js.shippedsuite.com/api/widget.js"></script>
  <iselse>
    <script src="https://js-staging.shippedsuite.com/api/widget.js"></script>
  </isif>

  <isscript>
    var assets = require('*/cartridge/scripts/assets.js');
    assets.addJs('/js/shippedWidget.js');
  </isscript>

  <isif condition="${dw.system.Site.current.preferences.custom.shippedWidgetLocation.value == 'checkout'}">
    <div class="shipped-widget" data-subtotal="${pdict.order.totals.subTotal}"></div>
  </isif>
  <isif condition="${dw.system.Site.current.preferences.custom.shippedWidgetLocation.value == 'cart'}">
    <div class="shipped-widget" data-subtotal="${pdict.totals.subTotal}"></div>
  </isif>

  <script type="text/javascript">
    document.addEventListener('DOMContentLoaded', function () {
      const shippedWidget = new Shipped.Widget(shippedConfig);

      function subtotalValue(subtotal) {
        if (subtotal === null || subtotal === undefined) return 0;

        return subtotal.replace('$', '').replace(',', '');
      }

      var existingDetails;

      function shouldRefreshUI(existingDetails, details) {
        if (existingDetails === undefined) return true;
        if (existingDetails.isSelected == details.isSelected && details.isSelected === false) return false;
        if (existingDetails.totalFee === details.totalFee && existingDetails.isSelected == details.isSelected) return false;

        return true;
      }

      function handleShippedChange(details) {
        let path;
        if (details.isSelected) {
          // add shield
          path = '/on/demandware.store/Sites-RefArch-Site/default/ShippedSuite-Add'
          console.log('adding...')
        } else {
          // remove shield
          path = '/on/demandware.store/Sites-RefArch-Site/default/ShippedSuite-Remove'
          console.log('removing...')
        }

        var shouldRefresh = shouldRefreshUI(existingDetails, details);
        console.log('should refresh UI?', shouldRefresh);
        existingDetails = details;

        fetch(path, {
          method: 'POST',
          headers: {
            'Accept': 'application/json',
          },
          mode: 'same-origin',
        }).then(function(response) {
          return response.json();
        }).then(function(data) {
          if (shouldRefresh) {
            // for checkout page
            $('body').trigger(
              'checkout:updateCheckoutView', { order: data.order, customer: data.customer }
            );
            // for cart page
            $('.quantity-form > .quantity').first().change();
          }
        });
      }

      var widget = document.getElementsByClassName('shipped-widget')[0];
      var existingSubtotal = widget.dataset.subtotal;
      shippedWidget.updateOrderValue(subtotalValue(widget.dataset.subtotal));

      // update order value when cart items change
      // only applicable on cart page
      $('body').on('cart:update promotion:success', function(e, data) {
        var totals;
        if (data.basket === undefined) {
          totals = data.totals;
        } else {
          totals = data.basket.totals;
        }
        if (totals === undefined) return;

        console.log('change total?', existingSubtotal !== totals.subTotal);
        if (existingSubtotal !== totals.subTotal) {
          shippedWidget.updateOrderValue(subtotalValue(totals.subTotal));
        }

        existingSubtotal = totals.subTotal;
      });

      shippedWidget.onChange(details => handleShippedChange(details));
    });

  </script>
</isif>
